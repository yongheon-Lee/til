1. 앞으로 git 프로젝트로 만들고 싶은 것
 - 개발자 활동을 위한 학습 내용, 개인 프로젝트, 팀 프로젝트를 등록하고, 개발자 커리어 이력서로 만들고 싶습니다.

2. 1주차 주요 개념 키워드 적어보기
 - 깃, 깃허브
  > 깃: 버전 관리 도구. 현재 프로젝트의 상태에 대한 정보를 저장하고 조회함으로써 프로그래밍 중 변경사항을 확인하고, 에러 발생 시 이전 버전으로 되돌려 재작업할 수 있다. 또, 하나의 프로젝트를 여럿이 나눠 작업하고 하나로 손쉽게 합칠 수 있다.
  > 깃허브: 깃의 원격 저장소이면서 깃을 사용하는 사람들의 커뮤니티 서비스. 깃으로 관리하는 프로젝트를 저장하고, 개발할 기능을 관리하고, 다른 개발자들과 소통할 수 있는 공간

 - 버전 관리
  > 누가, 언제, 무엇을 작업했는지에 대한 정보를 저장하고 조회하는 것. 작성자, 작업 시점, 현재 프로젝트 상태의 정보를 저장하고 보는 것이다.

 - commit
  > 현재 프로젝트의 상태 정보를 저장하는 것. 깃의 작업 내역 단위이다.
  ※ 주의! 파일의 어떤 부분이 변경됐는지를 저장하는 것이 아님.

 - tracking
  > 로컬 repo, 원격 repo가 있고, 로컬 repo를 원격 repo와 연결할 때 필요한 작업. 원격 repo url을 통해 연결

 - push / pull
  > push: 로컬 repo의 commit을 원격 repo로 반영시키는 것
  > pull: 원격 repo의 commit을 로컬 reop로 반영시키는 것

 - clone
  > 원격 repo만 있을 때, 내 컴퓨터에서도 이를 쓸 수 있도록 repo를 그대로 가져오는 것

 - repo
  > 프로젝트 작업 파일들을 저장하는 공간

 - 원격 repo / 로컬 repo
  > 원격 repo: 다른 곳에서도 접속할 수 있는 공간(ex. github)에 저장된 repo
  > 로컬 repo: 내 컴퓨터에서만 접근할 수 있는 공간

 - history
  > 작업 내역을 볼 수 있는 공간. 빨간색이 삭제된 내용, 초록색이 수정 및 반영된 내용

 - conflict
  > 원격 repo와 로컬 repo에서 동시에 같은 파일을 수정했을 때 날리는 메시지
  > 방지법: 원격 repo에서 pull -> 로컬에서 작업 > 로컬 repo commit -> 원격 repo로 push

 - add(staging)
  > commit할 파일로 등록하는 것. 스테이지에 올린다고 해서 staging이라 함

 - git init
  > 프로젝트 폴더를 깃이 관리는 폴더로 설정하겠다고 설정하는 것. 깃 초기화라고 함

 - commit id
  > commit 당 부여되는 고유 식별번호